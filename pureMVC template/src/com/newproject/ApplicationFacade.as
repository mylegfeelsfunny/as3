package com.newproject{		import flash.display.Sprite;	import flash.events.Event;		import org.puremvc.as3.interfaces.IFacade;	import org.puremvc.as3.patterns.facade.Facade;	import com.newproject.controller.StartUpMacroCommand;		public final class ApplicationFacade extends Facade implements IFacade	{		public static const START								:String = "start";		public static const RESIZE								:String = "resize";		public static var APP_MC_LIBRARY						:Sprite;		private static var _instance							:ApplicationFacade;		private static var _ratio								:Number = 540/960;		public function ApplicationFacade() {}				public static function getInstance():ApplicationFacade		{			if (!instance) _instance = new ApplicationFacade();			return _instance as ApplicationFacade;		}				public function startup( $mc:AssetManager ):void		{			APP_MC_LIBRARY = $mc;			APP_MC_LIBRARY.stage.addEventListener(Event.RESIZE, onStageResize);						sendNotification(ApplicationFacade.START, APP_MC_LIBRARY);		}				override protected function initializeController():void		{			super.initializeController();			registerCommand(ApplicationFacade.START, StartUpMacroCommand);		}		private function onStageResize($e:Event):void		{			sendNotification(ApplicationFacade.RESIZE, ApplicationFacade.returnStageObject());		}				public static function returnStageObject():Object		{			var sizeObj:Object = {}			sizeObj.width = int(APP_MC_LIBRARY.stage.stageWidth);			sizeObj.height = int(APP_MC_LIBRARY.stage.stageWidth * _ratio);			sizeObj.scale = APP_MC_LIBRARY.stage.stageWidth / 960;						var offY:Number = (APP_MC_LIBRARY.stage.stageHeight - sizeObj.height) * .5;			sizeObj.offsetY = (offY < 0 ) ? 0 : int(offY);			return sizeObj;		}	}}