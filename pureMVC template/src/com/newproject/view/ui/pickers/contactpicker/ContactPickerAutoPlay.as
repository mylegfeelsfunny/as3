package com.office365.view.ui.pickers.contactpicker{	import com.deepfocus.as3.utils.LibraryAssetRetriever;	import com.office365.view.ui.pickers.contactpicker.ui.ContactList;	import com.office365.view.ui.pickers.contactpicker.ui.ContactListAutoPlay;	import com.office365.view.ui.pickers.contactpicker.ui.ContactSelection;	import com.office365.view.ui.pickers.event.PickerEvent;	import com.office365.view.ui.pickers.overlay.Overlay;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.utils.Timer;		public final class ContactPickerAutoPlay extends ContactPicker	{		private var AUTOPLAY:Boolean;		private var _teammateIndex:int;		private var _autoPlayArray:Array;		private var _timer:Timer;		public function ContactPickerAutoPlay($mc:MovieClip, $list:Array, $autoPlay:Array)		{			_autoPlayArray = $autoPlay;			super($mc, $list);		}				//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------		public function get autoPlayArray():Array { return _autoPlayArray; }		public function set autoPlayArray(value:Array):void { _autoPlayArray = value;  }				//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------		override protected function _init($e:Event):void		{			//trace(this, "_init");			_mc.removeEventListener(Event.ADDED_TO_STAGE, _init, false);			_mc.addEventListener(Event.REMOVED_FROM_STAGE, _kill, false, 0, true);			_selectedContactContainer = _mc.selectedContactContainer;						_overlay = new Overlay(_mc.overlay);			_instructions = _mc.instructions;			_instructions.visible = false;						_contactList = new ContactListAutoPlay(_mc, _list);			_contactList.addEventListener(PickerEvent.SELECTED, onContactSelectedHandler, false, 0, true);						_pickerLoc = new Point(_mc.contactlistcontainerMC.x, _mc.contactlistcontainerMC.y);			_listLoc = new Point(_selectedContactContainer.x, _selectedContactContainer.y);			_instructionsLoc = new Point(_instructions.x, _instructions.y);						_startIndex = _autoPlayArray[0];			_mc.mouseEnabled = _mc.mouseChildren = false;		}				/** Triggers in the ContactList MC, the auto-selection of the a chosen contact. 		 * @index The index of the chosen contact in the arrangement. */		public function autoSelect(index:int):void{			trace(this, "index", index);			ContactListAutoPlay(_contactList).scrollToIndex(index);		}				//--------------------------------------------------------------------------		// PRIVATE METHODS		//--------------------------------------------------------------------------		override protected function onAnimateInCompleteHandler($e:Event):void		{			autoSelect(_startIndex);			super.onAnimateInCompleteHandler($e);		}				override protected function _kill($e:Event):void		{			_timer.removeEventListener(TimerEvent.TIMER, onContactSelectionDone);			_timer = null;		}				//--------------------------------------------------------------------------		//  EVENT HANDLERS		//--------------------------------------------------------------------------		override protected function onContactSelectedHandler($e:PickerEvent):void{			if (thereAlready($e.data.index))		return;			var selectedcontactMC:MovieClip = MovieClip(LibraryAssetRetriever.getAsset("selectedcontact"));			var contact:ContactSelection = new ContactSelection(selectedcontactMC, $e.data);			contact.id = $e.data.index;			_mc.selectedContactContainer.addChild(contact);			reframe();									_teammateIndex ++;			if (_teammateIndex >= 3) {				_timer = new Timer(2000, 0);				_timer.addEventListener(TimerEvent.TIMER, onContactSelectionDone);				_timer.start();				} else {				autoSelect(_autoPlayArray[_teammateIndex]);			}		}	}}