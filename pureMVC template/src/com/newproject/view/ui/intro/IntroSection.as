package com.office365.view.ui.intro{	import com.deepfocus.as3.display.section.Section;	import com.deepfocus.as3.display.video.videoplayer.ChromelessVideoPlayer;	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;	import com.deepfocus.as3.templates.microsite.AbstractMain;	import com.greensock.TweenNano;	import com.greensock.easing.Strong;	import com.office365.ApplicationFacade;	import com.office365.AssetManager;	import com.office365.view.ui.experience.event.SceneEvent;	import com.office365.view.ui.intro.event.IntroEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.external.ExternalInterface;	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.net.navigateToURL;
			public class IntroSection extends Section	{		private var _data:Object;		private var _stage:Object;		private var _videoPlayer:ChromelessVideoPlayer;		private var _logo:MovieClip;		private var _blurplate:MovieClip;		private var _linkedinCTA:MovieClip;		private var _elementsArray:Array;				private var _angleX:Number = 0;		private var _angleY:Number = 0;		private var _radiusX:Number = 8;		private var _radiusY:Number = 7;		private var _angleChangeX:Number = 4;		private var _angleChangeY:Number = 5;		private var _centerX:Number;		private var _centerY:Number;				private var _soundTrack:Sound;		private var _startMode:int;				public function IntroSection($mc:MovieClip, $data:Object, $startMode:int)		{			_data = $data;			_startMode = $startMode;			super($mc);		}				//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------		override protected function _init():void		{			super._init();			_logo = _mc.logo;			_linkedinCTA = _mc.cta;			_blurplate = _mc.blurplate;			_elementsArray = [_logo];						_stage = ApplicationFacade.returnStageObject();			trace(this, "AbstractMain.PATH+_data.path", AbstractMain.PATH+_data.path);			_videoPlayer = new ChromelessVideoPlayer(AbstractMain.PATH+_data.path, _stage.width,  _stage.height)			_videoPlayer.addEventListener(VideoControllerEvent.CONNECTION_MADE, videoReadyHandler, false, 0);			_videoPlayer.addEventListener(VideoControllerEvent.VIDEO_OVER, videoOverHandler, false, 0);			_mc.addChild(_videoPlayer);						var l:int =  _elementsArray.length;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var elm:MovieClip = MovieClip(_elementsArray[i]);				elm.visible = false;				elm.alpha = 0;			}						_blurplate.visible = false;									_logo.useHandCursor = true;			_logo.buttonMode = true;			_logo.addEventListener(MouseEvent.CLICK, onLogoClickHandler, false, 0, true);			//_blurplate.visible = false;			//showElements();		}				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------		override public function setVolume($ratio:Number):void		{			super.setVolume($ratio);			if (_videoPlayer) _videoPlayer.volume($ratio);		}		override public function resize(obj:Object):void		{			_videoPlayer.resize(obj.width, obj.height);			_mc.masker.width = obj.width;			_mc.masker.height = obj.height;			_mc.bkg.width = obj.width;			_mc.bkg.height = obj.height;			//_linkedinCTA.x = (_mc.bkg.width * .5) - (_linkedinCTA.width * .5);			//_linkedinCTA.y = (_mc.bkg.height * .5) - (_linkedinCTA.height * .5);			this.y = obj.offsetY;					_centerX = stage.stageWidth * .5;			_centerY = (stage.stageHeight * .5) - (obj.offsetY * .5);			_blurplate.x = _centerX;			_blurplate.y = _centerY;			_blurplate.width = obj.width + (obj.width * .3);			_blurplate.height = obj.height + (obj.height * .3);		}		//--------------------------------------------------------------------------		// PRIVATE METHODS		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  CREATE / DESTROY		//--------------------------------------------------------------------------		private function showElements():void		{			//addChild(_mc.bkg);			//addChild(_blurplate);			var l:int =  _elementsArray.length;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var elm:MovieClip = MovieClip(_elementsArray[i]);				elm.visible = true;				addChild(elm);				TweenNano.to(elm, 1, {alpha:1, ease:Strong.easeOut, overwrite:0});			}							_blurplate.visible = true;			_blurplate.gotoAndPlay(2);			stage.addEventListener(Event.ENTER_FRAME, onMoveScreenHandler, false, 0, true);		}				override protected function _destroy():void {			//_linkedinCTA.removeEventListener(MouseEvent.CLICK, onLinkedInClickHandler, false);			stage.removeEventListener(Event.ENTER_FRAME, onMoveScreenHandler);			var l:int =  numChildren;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var elm:MovieClip = MovieClip(getChildAt(0));				removeChild(elm);				elm = null;			}		}		//--------------------------------------------------------------------------		//  EVENT HANDLERS		//--------------------------------------------------------------------------		private function onLogoClickHandler($e:MouseEvent):void		{/*			var request:URLRequest = new URLRequest(_data.link);			//request.data = variables;			try {            				navigateToURL(request, "_blank");			}			catch (e:Error) {				// handle error here			}*/					trace(this, "ExternalInterface", _data.link);			trace(this, "home", "trial");			//ExternalInterface.call("window.open", _data.link);						//var jscommand:String = "window.open("+_data.link+");"; 			//var url:URLRequest = new URLRequest("javascript:" + jscommand + " void(0);"); 			//navigateToURL(url, "_blank");						var obj:Object = {origin:"home", scene:"trial"}			dispatchEvent(new SceneEvent(SceneEvent.TRACKING, obj));						ExternalInterface.call("function setWMWindow() {window.open('" + _data.link + "');}");		}		private function videoReadyHandler($e:VideoControllerEvent):void		{			_videoPlayer.removeEventListener(VideoControllerEvent.CONNECTION_MADE, videoReadyHandler, false);			dispatchEvent(new IntroEvent(IntroEvent.LOADED));			dispatchEvent(new IntroEvent(IntroEvent.SOUND_CUE));			resize(_stage);						_videoPlayer.resume();				}				private function videoOverHandler($e:VideoControllerEvent):void		{			_videoPlayer.removeEventListener(VideoControllerEvent.VIDEO_OVER, videoOverHandler, false);			_videoPlayer.visible = false;			//if (_startMode != 0) {			//	dispatchEvent(new IntroEvent(IntroEvent.INTRO_OVER));		//	} else {			//	showElements();		//	}						showElements();			dispatchEvent(new IntroEvent(IntroEvent.INTRO_OVER));		}				private function onMoveScreenHandler(e:Event):void{			var rX:Number = degToRad(_angleX);			var rY:Number = degToRad(_angleY);			_blurplate.x = Math.cos(rX) * _radiusX + _centerX;			_blurplate.y = Math.sin(rY) * _radiusY + _centerY;			_angleX += _angleChangeX;			_angleY += _angleChangeY;			_angleX %= 360;			_angleY %= 360;		}				private function degToRad($deg:Number):Number		{			return $deg * (Math.PI/180);		}	}}