package com.office365.view.ui.experience.scenes{	import com.deepfocus.as3.templates.microsite.AbstractMain;	import com.office365.ApplicationFacade;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IEventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;
		public class FlashScene extends AbstractScene	{		private var _loader:Loader;				public function FlashScene($linkedIn:Object, $classInfo:Object)		{			super($linkedIn, $classInfo);		}						//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------		override public function playSection():void { 			//_body.gotoAndPlay(1);			trace(this, "playSection" );			super.playSection();		}		//--------------------------------------------------------------------------		// PRIVATE METHODS		//--------------------------------------------------------------------------		override public function prepareBody():void		{			// JSON MS STUFF			//_body.addEventListener("flash_timeline_over", bodyOverHandler, false, 0, true);			super.prepareBody();		}				//--------------------------------------------------------------------------		//  CREATE / DESTROY		//--------------------------------------------------------------------------		override public function createBody():void		{			var loaderContext:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);					_loader= new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, _onAssetLoadComplete,false,0);			_loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, _httpStatusHandler,false,0);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, _ioErrorHandler,false,0);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, _onLoadProgress,false,0);			_loader.load(new URLRequest(AbstractMain.PATH+_classInfo.path),loaderContext);		}				override public function destroyBody($e:Event):void {			try	{				_loader.close();				_loader.unloadAndStop();				_loader = null;			} catch ($e:Error) {				trace(this, "Error :: ", $e.message);				}			super.destroyBody($e);		}						//--------------------------------------------------------------------------		//  Replace movieclip child0 with image of same height and width		//--------------------------------------------------------------------------		protected function sizeAndPlace($pic:MovieClip, $bitmap:Bitmap):void		{			$bitmap.smoothing						= true;			var picWidth			:Number			= $pic.getChildAt(0).width;			var picHeight			:Number			= $pic.getChildAt(0).height;			var picArea				:Number			= picWidth * picHeight;			var bitmapArea			:Number			= $bitmap.width * $bitmap.height;			var scale				:Number;			var tobeKilled			:DisplayObject 	= $pic.getChildAt(0);						var w					:Number;			var h					:Number;			var scaleDir			:String			var directionH			:String			var directionW			:String			if (($bitmap.width - picWidth) > 0) { w = picWidth/$bitmap.width; }			else { w = $bitmap.width/picWidth; }			if (($bitmap.height - picHeight) > 0) { h = picHeight/$bitmap.height; }			else { h = $bitmap.height/picHeight; }						w = picWidth/$bitmap.width;			h = picHeight/$bitmap.height;			scale =(h > w) ? h : w;						$bitmap.width = scale * $bitmap.width;			$bitmap.height = scale * $bitmap.height;						var diffW				:Number;			var diffH				:Number;						var sprite			:Sprite			= new Sprite();			sprite.graphics.beginFill(0x000000);			sprite.graphics.drawRect(0,0,picWidth,picHeight);			sprite.graphics.endFill();									$pic.removeChildAt(0);			tobeKilled = null;			$pic.addChild($bitmap);			$pic.addChild(sprite);						$bitmap.mask		= sprite;			diffW				= ($bitmap.width - picWidth) * .5;			diffH				= ($bitmap.height - picHeight) * .5;			$bitmap.y = -diffH;			$bitmap.x = -diffW;		}		//--------------------------------------------------------------------------		//  EVENT HANDLERS		//--------------------------------------------------------------------------		private function _onAssetLoadComplete($e:Event):void{			//remove xml listeners, init asset manager and pass it asset mc and xml			_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, _onAssetLoadComplete,false);			_loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, _httpStatusHandler,false);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, _ioErrorHandler,false);			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, _onLoadProgress,false);						_body = MovieClip($e.currentTarget.content);			this.addChildAt(_body, 0);						prepareBody();		}				//loading hellper functions		private function _httpStatusHandler($e:HTTPStatusEvent):void{			//trace("httpStatusHandler: " + $e);		}		private function _ioErrorHandler($e:IOErrorEvent):void{			trace("ioErrorHandler: " + $e);		}		private function _onLoadProgress($e:ProgressEvent):void{			//trace("progressHandler: bytesLoaded=" + $e.bytesLoaded + " bytesTotal=" + $e.bytesTotal);		}			}}