/*		Note :: 									If you have a Sprite/MovieClip that you do not want repositioned or included at all, then the naming scheme				needs to adapt.  To avoid its addition in this class, start its instance name with				"dna_" which stands for 'do not add' to array. Then you are responsible for is repositioning.									Example here:					instead of "movieClipName" make it "dna_movieClipName"									If there is a movieClip that gives you internal timeline troubles, the best option is to not 				reset its timeline here, but in the beginning of your banner code. 								To avoid its timeline being reset, begin its instance name with these letters				"dnr_" which stands for 'do not reset'. 								Example here:					instead of "movieClipName" make it "dnr_movieClipName"														Thats it. let me know what other bugs you may run into;*/package com.deepfocus.as3.utils{	import com.greensock.TweenNano;	import com.greensock.easing.Quad;		import flash.display.DisplayObject;	import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.SimpleButton;		public class ResetNestedValues {				private var _array						:Array;			private var _mc							:MovieClip;			private var _tween						:Boolean					public function ResetNestedValues($mc:MovieClip, $tween:Boolean = true)		{			_mc = $mc;			_tween = $tween;			_array = [];						getSetChildren(_mc);		}				private function getSetChildren(disp:DisplayObjectContainer):void		{			var l:int =  disp.numChildren;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				if ( Object( disp.getChildAt( i ) ) is DisplayObject )				{					var sp:DisplayObject = DisplayObject( disp.getChildAt( i ) );					var obj:Object = {													spriteChar:sp,													xPos:sp.x,													yPos:sp.y,													sRotation:sp.rotation,													scaleXValue:sp.scaleX,													scaleYValue:sp.scaleY,													alphaValue:sp.alpha,													visibleValue:sp.visible												};					if (sp is MovieClip && sp.name != null && sp.name.substr(0, 4) == "dnr_")					{						trace('Timeline of MovieClip : "' + sp.name + '"' + "s timeline was not reset. Good lookin out.");						obj.currFrame = "do_not_reset_mc";					}					if (sp is MovieClip && sp.name != null && sp.name.substr(0, 4) == "dna_")					{						trace('Timeline of MovieClip : "' + sp.name + '" will not be repositioned. Good lookin out.');						obj.currFrame = "do_not_reposition_mc";					}					else					{						obj.currFrame = (sp is MovieClip) ? MovieClip(sp).currentFrame : "not a movieClip";					}																_array.push(obj);					if (obj.spriteChar is DisplayObjectContainer && (obj.currFrame != "do_not_reset_mc" || obj.currFrame != "do_not_reposition_mc")) { getSetChildren(obj.spriteChar); }				}			}		}			public function reset():void		{			var l:int =  _array.length;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var spObj:Object 		= Object(_array[i]);				var sp:DisplayObject 	= DisplayObject(spObj.spriteChar);				if (spObj.currFrame != "do_not_reposition_mc") 				{ 						//return; 									if (_mc.	contains(sp) && sp != null)					{						if (sp is MovieClip && (spObj.currFrame != "do_not_reset_mc" || spObj.currFrame != "not a movieClip")) { MovieClip(sp).gotoAndStop(spObj.currFrame); }								if (_tween)						{							TweenNano.to(sp, .3, { 																	x				:spObj.xPos, 																	y				:spObj.yPos, 																	scaleX		:spObj.scaleXValue,  																	scaleY		:spObj.scaleYValue, 																	alpha		:spObj.alphaValue,																	rotation	:spObj.sRotation,																	ease			:Quad.easeOut																});						}						else						{								sp.x 			= spObj.xPos; 								sp.y 			= spObj.yPos;								sp.scaleX 	= spObj.scaleXValue; 								sp.scaleY 	= spObj.scaleYValue; 								sp.alpha 	= spObj.alphaValue;								sp.rotation 	= spObj.sRotation;						}						sp.visible 	= spObj.visibleValue;					}								} // if (spObj.currFrame == "do_not_reposition_mc") 							}	// loop end		}	}}