package com.deepfocus.as3.display.video.videoplayer{	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;	import com.deepfocus.as3.display.video.videoplayer.model.VideoPlayerBrain;	import com.deepfocus.as3.display.video.videoplayer.ui.Controls;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.media.Video;	import flash.ui.Keyboard;	import flash.utils.Timer;		public class ChromelessVideoPlayer extends MovieClip	{		protected var _videoPlayerBrain		:VideoPlayerBrain;		protected var _video				:Video;		protected var _videoPath			:String;		protected var _swfPath				:String;		protected var _width				:Number;		protected var _height				:Number;		protected var _updateCallback		:Function;		public static const PLAYER_STATE_INIT				:String = "player_state_init";		public static const PLAYER_STATE_PAUSE				:String = "player_state_pause";		public static const PLAYER_STATE_RESUME				:String = "player_state_resume";		public static const PLAYER_STATE_SCRUB_START		:String = "player_state_scrub_start";		public static const PLAYER_STATE_SCRUB_END			:String = "player_state_scrub_end";		public static const PLAYER_STATE_END				:String = "player_state_end";		protected var _currentState:String;		protected var _beforeScrubState:String;				public static var	CONTROLS_HEIGHT					:Number;						public function ChromelessVideoPlayer($videoPath:String, $width:Number, $height:Number, $updateCallback:Function=null)		{			_videoPath						= $videoPath;			_width							= $width;			_height							= $height;			_updateCallback					= $updateCallback;			_video							= new Video($width, $height);			addEventListener(Event.ADDED_TO_STAGE, _init, false, 0, true);		}				private function _init($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init, false);			this.addChild(_video);												_videoPlayerBrain = new VideoPlayerBrain(_video, _videoPath, _updateCallback);			_videoPlayerBrain.addEventListener(VideoControllerEvent.VIDEO_OVER, onVideoOverHandler);			_videoPlayerBrain.addEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			_videoPlayerBrain.addEventListener(VideoControllerEvent.INVALID_TIME, onInvalidTime);			_videoPlayerBrain.addEventListener(VideoControllerEvent.VIDEO_CUE_POINT, onCuePointHandler);						currentState = PLAYER_STATE_INIT;						addEventListener(Event.REMOVED_FROM_STAGE, _kill, false, 0, true);		}				//--------------------------------------------------------------------------		//  CREATE / DESTROY		//--------------------------------------------------------------------------		public function _kill($e:Event):void		{			removeEventListener(Event.REMOVED_FROM_STAGE, _kill, false);						_videoPlayerBrain.kill();			_videoPlayerBrain.removeEventListener(VideoControllerEvent.VIDEO_OVER, onVideoOverHandler);			_videoPlayerBrain.removeEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			_videoPlayerBrain.removeEventListener(VideoControllerEvent.INVALID_TIME, onInvalidTime);			this.removeChild(_video);						_videoPlayerBrain	= null;			_video				= null;			_videoPath			= null;			_width				= undefined;			_height				= undefined;		}				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------		public function get currentState():String { return _currentState; }		public function set currentState(value:String):void {			_currentState = value;  			playerStateUpdate();		}				protected function playerStateUpdate():void		{			switch (_currentState)			{				case PLAYER_STATE_INIT:					_videoPlayerBrain.openConnection();					_videoPlayerBrain.soundTransform(1);					//_videoPlayerBrain.indicateNetStream = true;					break;				case PLAYER_STATE_RESUME:					_videoPlayerBrain.resume();					break;				case PLAYER_STATE_PAUSE:					_videoPlayerBrain.pause();					break;				case PLAYER_STATE_END:					_videoPlayerBrain.seek(0);					_videoPlayerBrain.pause();					//_videoPlayerBrain.indicateNetStream = false;					break;			}		}				public function resize(w:Number, h:Number):void		{			_video.width = w;			_video.height = h;		}				//--------------------------------------------------------------------------		//  EXTERNAL INTERFACE CALLBACKS		//--------------------------------------------------------------------------		public function pause():void		{			currentState = PLAYER_STATE_PAUSE;		}		public function resume():void		{			currentState = PLAYER_STATE_RESUME;		}		public function volume($data:Number):void		{			_videoPlayerBrain.soundTransform($data);		}				//--------------------------------------------------------------------------		//  VIDEO BRAIN CALLBACKS		//--------------------------------------------------------------------------		protected function onCuePointHandler($e:VideoControllerEvent):void		{			dispatchEvent($e)		}		protected function onVideoOverHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			dispatchEvent($e)		}				protected function onInvalidTime($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			dispatchEvent($e);		}				private function onConnectionMade($e:VideoControllerEvent):void		{			_videoPlayerBrain.removeEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			currentState = PLAYER_STATE_END;			dispatchEvent($e)		}					}}