package com.deepfocus.as3.display.video.videoplayer{	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;	import com.deepfocus.as3.display.video.videoplayer.model.VideoPlayerBrain;	import com.deepfocus.as3.display.video.videoplayer.ui.Controls;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.media.Video;	import flash.ui.Keyboard;	import flash.utils.Timer;		import mx.events.ResizeEvent;
		public class VideoPlayer extends Sprite	{		protected var _videoPlayerBrain		:VideoPlayerBrain;		protected var _video				:Video;		protected var _videoPath			:String;		protected var _swfPath				:String;		protected var _width				:Number;		protected var _height				:Number;		protected var _controls				:Controls;		protected var _mouseGrabber			:Sprite;		private var _showTimer				:Timer;					public static const PLAYER_STATE_INIT				:String = "player_state_init";		public static const PLAYER_STATE_PAUSE				:String = "player_state_pause";		public static const PLAYER_STATE_RESUME				:String = "player_state_resume";		public static const PLAYER_STATE_SCRUB_START		:String = "player_state_scrub_start";		public static const PLAYER_STATE_SCRUB_END			:String = "player_state_scrub_end";		public static const PLAYER_STATE_END				:String = "player_state_end";		protected var _currentState:String;		protected var _beforeScrubState:String;				public static var	CONTROLS_HEIGHT					:Number;				public function VideoPlayer($videoPath:String, $width:Number, $height:Number, $swfPath:String)		{			_videoPath						= $videoPath;			_swfPath						= $swfPath;				_width							= $width;			_height							= $height;			_video							= new Video($width, $height);			addEventListener(Event.ADDED_TO_STAGE, _init, false, 0, true);		}				public function get controls():Controls { return _controls; }		public function set controls(value:Controls):void { _controls = value;  }				private function _init($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init, false);			this.addChild(_video);						_controls = new Controls(_swfPath, stage.stageWidth, stage.stageHeight);			_controls.addEventListener(VideoControllerEvent.PAUSE, onPauseHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.RESUME, onResumeHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.VOLUME_CHANGE, onVolumeChangeHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.FULLSCREEN, onFullScreenHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.INIT_SCRUBBING, onInitScrubHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.SCUB_CHANGE, onScrubHandler, false, 0, true);				_controls.addEventListener(VideoControllerEvent.END_SCRUBBING, onEndScrubHandler, false, 0, true);							_controls.addEventListener(MouseEvent.ROLL_OVER, _controls.show, false, 0, true);			_controls.addEventListener(MouseEvent.ROLL_OUT, _controls.hide, false, 0, true);						this.addChild(_controls);									_videoPlayerBrain = new VideoPlayerBrain(_video, _videoPath, updateScrubber);			_videoPlayerBrain.addEventListener(VideoControllerEvent.INIT_DATA, initVideoData);			_videoPlayerBrain.addEventListener(VideoControllerEvent.VIDEO_OVER, onVideoOverHandler);			_videoPlayerBrain.addEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			_videoPlayerBrain.addEventListener(VideoControllerEvent.INVALID_TIME, onInvalidTime);			stage.addEventListener(ResizeEvent.RESIZE, sizeEventHandler);						currentState = PLAYER_STATE_INIT;		}				//--------------------------------------------------------------------------		//  CREATE / DESTROY		//--------------------------------------------------------------------------		private function createMouseGrabber():Sprite		{			var mc:Sprite = new Sprite();			mc.graphics.beginFill(0x000000, 0);			mc.graphics.drawRect(0, 0, _width, _height);			mc.graphics.endFill();			return mc;		}				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------		public function get currentState():String { return _currentState; }		public function set currentState(value:String):void {			_currentState = value;  			playerStateUpdate();		}				protected function playerStateUpdate():void		{			switch (_currentState)			{				case PLAYER_STATE_INIT:					_videoPlayerBrain.openConnection();					_videoPlayerBrain.soundTransform(1);					_videoPlayerBrain.indicateNetStream = true;					break;				case PLAYER_STATE_RESUME:					_videoPlayerBrain.resume();					break;				case PLAYER_STATE_PAUSE:					_videoPlayerBrain.pause();					break;				case PLAYER_STATE_END:					_videoPlayerBrain.seek(0);					_videoPlayerBrain.pause();					_videoPlayerBrain.indicateNetStream = false;					break;			}		}				//--------------------------------------------------------------------------		//  EXTERNAL INTERFACE CALLBACKS		//--------------------------------------------------------------------------		protected function onPauseHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_PAUSE;		}		protected function onResumeHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_RESUME;		}		protected function onInitScrubHandler($e:VideoControllerEvent):void		{			_beforeScrubState = currentState;			currentState = PLAYER_STATE_PAUSE;		}		protected function onScrubHandler($e:VideoControllerEvent):void		{			_videoPlayerBrain.seek($e.videoData.ratio);					}		protected function onEndScrubHandler($e:VideoControllerEvent):void		{			if (_beforeScrubState == 'undefined') return;			currentState = _beforeScrubState;			_beforeScrubState = 'undefined';		}		protected function onVolumeChangeHandler($e:VideoControllerEvent):void		{			_videoPlayerBrain.soundTransform($e.videoData.volume);		}				protected function onFullScreenHandler($e:VideoControllerEvent = null):void		{			switch(stage.displayState) {				case StageDisplayState.NORMAL:					stage.displayState = StageDisplayState.FULL_SCREEN;					break;				case StageDisplayState.FULL_SCREEN:					stage.displayState = StageDisplayState.NORMAL;					break;			}		}				protected function sizeEventHandler($e:*):void		{			switch(stage.displayState) {				case StageDisplayState.NORMAL:					_video.width = _width;					_video.height = _height;					_controls.resetControls(stage.stageWidth, stage.stageHeight);					_controls.y = stage.stageHeight-50;					_showTimer.stop();						_showTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, testTimer);					_showTimer = null;					_controls.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveHandler, false);					break;				case StageDisplayState.FULL_SCREEN:					_width = _video.width;					_height = _video.height;					_video.width = stage.fullScreenWidth;					_video.height = stage.fullScreenHeight;					_controls.resetControls(stage.stageWidth, stage.stageHeight);					_controls.y = stage.stageHeight-50;										_showTimer = new Timer(3000, 1);					_showTimer.addEventListener(TimerEvent.TIMER_COMPLETE, testTimer);					_showTimer.start();						_controls.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveHandler, false, 0, true);					break;			}		}				private function onMouseMoveHandler($e:MouseEvent):void		{			if (_controls.showing) {				_showTimer.stop();					_showTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, testTimer);								_showTimer = new Timer(3000, 1);				_showTimer.addEventListener(TimerEvent.TIMER_COMPLETE, testTimer);				_showTimer.start();				} else {				_controls.show($e);			}		}				private function testTimer($e:TimerEvent):void		{			_controls.hide(null);		}				//--------------------------------------------------------------------------		//  VIDEO BRAIN CALLBACKS		//--------------------------------------------------------------------------		protected function onVideoOverHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			ExternalInterface.call('videoOver');		}				protected function onInvalidTime($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			dispatchEvent($e);		}				private function onConnectionMade($e:VideoControllerEvent):void		{			_videoPlayerBrain.removeEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			currentState = PLAYER_STATE_END;		}				private function updateScrubber($obj:Object):void {			//ExternalInterface.call('update', $obj);			_controls.updateLoadedScrubber($obj.loaded);			_controls.updateProgressScrubber($obj.progress);			_controls.updateTime($obj.time);		}				private function initVideoData($e:VideoControllerEvent):void		{			_controls.y = stage.stageHeight-50;			//ExternalInterface.call('initVideoData', $e.videoData);			_controls.videoData($e.videoData.duration);		}						}}