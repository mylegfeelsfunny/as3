package  com.deepfocus.as3.display.video.videoplayer.ui {	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;	import com.greensock.TweenNano;	import com.greensock.easing.Back;	import com.greensock.easing.Strong;		import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.external.ExternalInterface;	import flash.geom.Point;	import flash.net.URLRequest;
		public class Controls extends Sprite {			private var _mc						:MovieClip;		private var _mousegrabber			:MovieClip;		private var _playBtn				:Sprite;		private var _pauseBtn				:Sprite;		private var _playedProgressBar		:MovieClip;		private var _loadedProgressBar		:MovieClip;		private var _totalProgressBar		:MovieClip;		private var _fullScreenBtn			:Sprite;		private var _time					:MovieClip;		private var _volume					:MovieClip;		private var _volumeBars					:MovieClip;				private var _duration				:Number;		private var _durationString			:String;		private var _currentTimeString		:String;		private var _actionState			:Number;		private var _swfPath				:String;		private var _width					:Number;		private var _height					:Number;		private var _loader					:Loader;		private var SCRUBBING				:Boolean;					public var showing					:Boolean;				public function Controls($swfPath:String, $width:Number, $height:Number) {			_swfPath = $swfPath;			_width = $width;			_height = $height;			addEventListener(Event.ADDED_TO_STAGE, _loadSwf, false, 0, true);			}		//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------						//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------		private function _init():void		{			addChild(_mousegrabber);			addChild(_mc);						_playBtn					= _mc.playbutton;			_playBtn.buttonMode			= true;			_playBtn.addEventListener(MouseEvent.CLICK, onPlayBtnClickHandler, false, 0, true);			_pauseBtn					= _mc.pausebutton;			_pauseBtn.buttonMode		= true;			_pauseBtn.addEventListener(MouseEvent.CLICK, onPauseBtnClickHandler, false, 0, true);						_fullScreenBtn				= _mc.fullscreen;			_fullScreenBtn.buttonMode	= true;			_fullScreenBtn.addEventListener(MouseEvent.CLICK, displayStateChangeHandler, false, 0, true);						_time						= _mc.time;			_totalProgressBar			= _mc.fullbar;			_loadedProgressBar			= _mc.loadprogressbar;			_playedProgressBar			= _mc.playprogressbar;			_totalProgressBar.buttonMode = true;			_loadedProgressBar.buttonMode = true;			_playedProgressBar.buttonMode = true;			_playedProgressBar.addEventListener(MouseEvent.CLICK, onProgressBarClickHandler, false, 0, true);			_playedProgressBar.addEventListener(MouseEvent.MOUSE_DOWN, onProgressBarDownHandler, false, 0, true);			_loadedProgressBar.addEventListener(MouseEvent.CLICK, onProgressBarClickHandler, false, 0, true);			_loadedProgressBar.addEventListener(MouseEvent.MOUSE_DOWN, onProgressBarDownHandler, false, 0, true);			_volume						= _mc.volume;			_volume.buttonMode			= true;			_volume.addEventListener(MouseEvent.MOUSE_DOWN, onVolumeMouseDownHandler, false, 0, true);			_volumeBars					= _mc.volumebars;			_volumeBars.buttonMode		= true;			_volumeBars.addEventListener(MouseEvent.CLICK, onVolumeClickHandler, false, 0, true);			_volumeBars.addEventListener(MouseEvent.MOUSE_DOWN, onVolumeMouseDownHandler, false, 0, true);						this.addEventListener(MouseEvent.MOUSE_UP, removeMouseMovementHandlers, false, 0, true);						resetControls(_width, _height);			_pauseBtn.visible = false;		}			//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------				public function show($e:MouseEvent):void		{			if (SCRUBBING) return;			showing = true;			TweenNano.to(_mc, .5, {y:0, ease:Strong.easeOut, overwrite:0});			}				public function hide($e:MouseEvent):void		{			if (SCRUBBING) return;			showing = false;			TweenNano.to(_mc, .5, {y:_mc.height, ease:Strong.easeOut, overwrite:0});			}				public function updateLoadedScrubber($value:Number):void		{			_loadedProgressBar.block.width = _totalProgressBar.width * $value;		}			public function updateProgressScrubber($value:Number):void		{			_playedProgressBar.block.width = _totalProgressBar.width * $value;		}			public function updateTime($value:Number):void		{			_currentTimeString = parseTime($value);			_time.txt.text = _currentTimeString + "/" + _durationString;		}				private function parseTime($value:Number):String		{			var clockSeconds:String = int($value % 60).toString();			var clockMinutes:String = int($value / 60).toString();						if (clockSeconds == 'undefined') clockMinutes = '00';			if (clockMinutes == 'undefined') clockSeconds = '00';			if(clockSeconds.length < 2) { 				clockSeconds = "0" + clockSeconds; 			}			//if(clockMinutes.length < 2) { 			//	clockMinutes = "0" + clockMinutes; 			//}			return clockMinutes + ":" + clockSeconds;		}				public function videoData($value:Number):void		{			_duration = $value;		}					public function resetControls($width:Number, $height:Number):void		{			_pauseBtn.x 				= 0;			_pauseBtn.y 				= 0;			_playBtn.x 					= 0;			_playBtn.y 					= 0;						_volume.x					= $width - _volume.width;			_volume.y					= 0;						_volumeBars.x				= ((_volume.width * .5) - (_volumeBars.width * .5)) + _volume.x;			_volumeBars.y				= ((_volume.height * .5) - (_volumeBars.height * .5)) + _volume.y;						_fullScreenBtn.x			= _volume.x - (_fullScreenBtn.width + 1);			_fullScreenBtn.y			= 0;			_time.x						= _fullScreenBtn.x - (_time.width + 1);			_time.y						= 0;						_totalProgressBar.x			= _pauseBtn.x + _pauseBtn.width + 1;			_totalProgressBar.y			= 0;			_loadedProgressBar.x		= _totalProgressBar.x;			_loadedProgressBar.y		= 0;			_playedProgressBar.x		= _totalProgressBar.x;			_playedProgressBar.y		= 0;						_totalProgressBar.block.width	= (_time.x - _totalProgressBar.x) - 1;			_totalProgressBar.visible = false;			_loadedProgressBar.block.width	= 0;			_playedProgressBar.block.width	= 0;//_totalProgressBar.width;						_mousegrabber.width			= $width;			_mousegrabber.height		= $height + _mc.height;			_mousegrabber.buttonMode	= true;			_mousegrabber.y				= -$height;						_durationString = parseTime(_duration);			_currentTimeString = parseTime(0);						_time.txt.text = _currentTimeString + "/" + _durationString;		}					//--------------------------------------------------------------------------		//  CREATE / DESTROY		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  BUTTON EVENT HANDLERS		//--------------------------------------------------------------------------		private function onPlayBtnClickHandler($e:MouseEvent):void		{			_playBtn.visible = false;			_pauseBtn.visible = true;			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.RESUME));		}				private function onPauseBtnClickHandler($e:MouseEvent):void		{			_pauseBtn.visible = false;			_playBtn.visible = true;			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.PAUSE));		}				private function displayStateChangeHandler($e:MouseEvent):void		{			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.FULLSCREEN));		}						//--------------------------------------------------------------------------		//  SCRUBBING		//--------------------------------------------------------------------------				private function onProgressBarDownHandler($e:MouseEvent):void		{			SCRUBBING = true;			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.INIT_SCRUBBING));			stage.addEventListener(MouseEvent.MOUSE_MOVE, onProgressScrubMovement, false, 0, true);		}				private function onProgressBarClickHandler($e:MouseEvent):void		{			elementScrubRatioValues($e, changeProgressScrubber, _playedProgressBar, _totalProgressBar)		}				private function onVolumeClickHandler($e:MouseEvent):void		{			elementScrubRatioValues($e, changeVolumeScrubber, _volumeBars);		}				private function onVolumeMouseDownHandler($e:MouseEvent):void		{						SCRUBBING = true;			stage.addEventListener(MouseEvent.MOUSE_MOVE, onProgressVolumeMovement, false, 0, true);		}						private function onProgressVolumeMovement($e:MouseEvent):void		{			elementScrubRatioValues($e, changeVolumeScrubber, _volumeBars);		}				private function onProgressScrubMovement($e:MouseEvent):void		{			elementScrubRatioValues($e, changeProgressScrubber, _playedProgressBar, _totalProgressBar)		}		private function changeProgressScrubber($obj:Object):void		{			_playedProgressBar.block.width = _totalProgressBar.width * $obj.x;			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.SCUB_CHANGE, {ratio:$obj.x}));		}				private function changeVolumeScrubber($obj:Object):void		{			var value:Number = $obj.x;			for (var i:int=0;i< 6;i++) {				_volumeBars['b_'+i].visible = false;			}						var loop:int =(value < .05) ? 0 : Math.ceil(value * 6);			for (i=0;i<loop;i++) {				_volumeBars['b_'+i].visible = true;			}						dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VOLUME_CHANGE, {volume:value}));		}					private function removeMouseMovementHandlers($e:MouseEvent):void		{			SCRUBBING = false;			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onProgressScrubMovement, false);			stage.removeEventListener(MouseEvent.MOUSE_MOVE, onProgressVolumeMovement, false);						dispatchEvent(new VideoControllerEvent(VideoControllerEvent.END_SCRUBBING));		}		//--------------------------------------------------------------------------		//  SCRUBBING UTILITIES		//--------------------------------------------------------------------------		private function elementScrubRatioValues($e:Event, callback:Function, theElement:Sprite, elementToMeasureAgainst:Sprite = null):void		{			var vector:Object = {};			vector.x = ratioByAxis('x', $e, theElement, elementToMeasureAgainst);			vector.y = ratioByAxis('y', $e, theElement, elementToMeasureAgainst);			callback(vector);		}						private function ratioByAxis(axis:String, $e:Event, theElement:Sprite, elementToMeasureAgainst:Sprite = null):Number		{						var againstElement:Sprite =(elementToMeasureAgainst) ? elementToMeasureAgainst : theElement;			var dist:String =(axis=='x') ? 'width' : 'height';			var ratio:Number = getInnerElementMouseCoordinates($e, theElement)[axis];			if (ratio < 0) ratio = 0;			else if (ratio > againstElement[dist]) ratio = againstElement[dist];						return ratio / againstElement[dist];		}				private function getInnerElementMouseCoordinates($e:Event, element:Sprite):Object		{			var coordinates:Object = {};			coordinates.x = stage.mouseX - element.x;			coordinates.y = stage.mouseY - element.y;			return coordinates;		}		        //--------------------------------------------------------------------------        //  EVENT HANDLERs        //--------------------------------------------------------------------------		private function _loadSwf($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _loadSwf, false);			_loader= new Loader();			_loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onAssetLoadComplete,false,0,true);			_loader.contentLoaderInfo.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler,false,0,true);			_loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler,false,0,true);			_loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onLoadProgress,false,0,true);			_loader.load(new URLRequest(_swfPath));        }                private function onAssetLoadComplete(e:Event):void{        	//remove xml listeners, init asset manager and pass it asset mc and xml        	_loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onAssetLoadComplete,false);			_loader.contentLoaderInfo.removeEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler,false);			_loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler,false);			_loader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, onLoadProgress,false);						_mc						= MovieClip(e.target.content).controls;			_mousegrabber			= MovieClip(e.target.content).mousegrabber;			_init();        }        		//loading hellper functions        private function httpStatusHandler(e:HTTPStatusEvent):void{            //trace("httpStatusHandler: " + e);        }        private function ioErrorHandler(e:IOErrorEvent):void{            //trace("ioErrorHandler: " + e);        }        private function onLoadProgress(e:ProgressEvent):void{            //trace("progressHandler: bytesLoaded=" + e.bytesLoaded + " bytesTotal=" + e.bytesTotal);        }					}	}