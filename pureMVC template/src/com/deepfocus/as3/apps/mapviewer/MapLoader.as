package com.deepfocus.as3.apps.mapviewer{	import com.afcomponents.umap.core.UMap;	import com.afcomponents.umap.display.markermanager.MarkerManager;	import com.afcomponents.umap.events.DisplayEvent;	import com.afcomponents.umap.events.MapEvent;	import com.afcomponents.umap.overlays.Marker;	import com.afcomponents.umap.styles.MarkerStyle;	import com.afcomponents.umap.types.Align;	import com.afcomponents.umap.types.AutoSizeType;	import com.afcomponents.umap.types.LatLng;	import com.greensock.TweenLite;	import com.greensock.easing.Strong;		import flash.display.*;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.HTTPStatusEvent;	import flash.events.IOErrorEvent;	import flash.events.MouseEvent;	import flash.events.ProgressEvent;	import flash.net.URLRequest;		public class MapLoader extends EventDispatcher{				/** UMap object */		private var _map:UMap;		/** The displayObject that holds the UMap object. */		public var container:MovieClip;		/** The last location (in the form of lat/lng coordinates) requested of the map. */		private var _lastCoords:LatLng;		/** The degree to which the map is zoomed. */		private var _zoomVal:Number = 13;				public function MapLoader(holder:MovieClip=null, lat:Number=NaN, lng:Number=NaN){			_lastCoords = new LatLng(lat, lng);						if(holder) 		init(holder);		}				//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------		public function init(holder:MovieClip):void{			removeEventListener(Event.ADDED_TO_STAGE, init, false);			container = holder;						_map = UMap(container.map);						if(!isNaN(_lastCoords.lat) && !isNaN(_lastCoords.lng)){				if(_lastCoords.lat + _lastCoords.lng > 0)	setCoords(_lastCoords.lat, _lastCoords.lng);			}						_map.cacheAsBitmap = true;			_map.smoothZoom = true;			_map.addEventListener(MapEvent.READY, onMapViewChanged, false, 0, true);						container.cacheAsBitmap = true;		}										/** Makes the map navigate to (and center over) a set of coordinates. */		public function setCoords(lat:Number, lng:Number, zoomLevel:Number=NaN):void{			if(!isNaN(zoomLevel))	_zoomVal = zoomLevel;			_lastCoords.lat = lat;			_lastCoords.lng = lng;			_map.zoomTo(_lastCoords,  _zoomVal);			_map.setCenter(_lastCoords,  _zoomVal);		}						private function updateMapView():void{			return;			/*container.x = (stage.stageWidth * .5);			container.y = (stage.stageHeight * .5);*/		}				private function onMapViewChanged($e:MapEvent):void{			//TweenLite.to(container, 4, { scaleX:1, scaleY:1, delay:1, onUpdate:updateMapView, overwrite:0 });		}				private function onMapZoomViewChanged($e:MapEvent):void{			_map.zoomTo(_lastCoords, _zoomVal);		}								public function destroy():void{			_map.removeEventListener(MapEvent.READY, onMapViewChanged, false);			try{				_map.dispose();			} catch($e:Error) {				trace(this, "Error::", $e.message);			}			_map = null;						var i:int = -1;			while(++i < container.numChildren){				container.removeChildAt(0);			}			removeEventListener(Event.ADDED_TO_STAGE, init, false);		}				public function addMarker(lat:Number, lng:Number, marker:DisplayObject=null):void{			if(!marker){				var dot:Shape = new Shape();				var grafx:Graphics = dot.graphics;				grafx.lineStyle(2, 0xFFFFFF);				grafx.beginFill(0x83b7ff);				grafx.drawCircle(0, 0, 8);				grafx.endFill();								marker = dot as DisplayObject;			}						_map.getBitmapXYFromLatLng(new LatLng(lat, lng));			container.addChild(marker);		}						//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------		/** Sets the degree to which the map is zoomed. */		public function set zoomlevel(num:Number):void{			_zoomVal = num;			_map.zoomTo(_lastCoords,  _zoomVal);		}				/** The width of the UMap object (within its MovieClip container). */		public function set mapWidth(num:Number):void{			_map.width = num;			_map.x = -(_map.width * .5);		}		/** @private */		public function get mapWidth():Number{			return _map.width;		}				/** The height of the UMap object (within its MovieClip container). */		public function set mapHeight(num:Number):void{			_map.height = num;			_map.y = -(_map.height * .5);		}		/** @private */		public function get mapHeight():Number{			return _map.height;		}				/** The width of the MovieClip holding the UMap object. */		public function set width(num:Number):void{			container.width = num/_map.width* 100;			container.scaleY = container.scaleX;		}		/** @private */		public function get width():Number{			return container.width* _map.width/100;		}				/** The height of the MovieClip holding the UMap object. */		public function set height(num:Number):void{			container.height = num/_map.height* 100;			container.scaleX = container.scaleY;		}		/** @private */		public function get height():Number{			return container.height* _map.height/100;		}				/** The degree to which the container MC is scaled. */		public function set scale(num:Number):void{			container.scaleX = container.scaleY = num;		}		/** @private */		public function get scale():Number{			return container.scaleX;		}			}}