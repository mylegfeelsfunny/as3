package com.egraphicsNY.as3.utils{	import com.egraphicsNY.as3.events.TimeUtilEvent;		import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.utils.Timer;	public class TimeUtil extends EventDispatcher	{		public static var instance					:TimeUtil;				private var _indexDate						:Date;			private var _clockTextfield					:TextField;		private var _secs							:Boolean;				private var _counterDate					:Date;					private var _counterDirection				:String;					private var _counterStopDate				:Date;					private var _counterTimer					:Timer;							private var _singleUnitCounterDate			:Date;					private var _singleUnitCounterDirection		:String;					private var _singleUnitCounterUnits			:String;					private var _singleUnitCounterTimer			:Timer;							private var _yearsLeft						:uint;		private var _monthsLeft						:uint;		private var _daysLeft						:uint;		private var _hoursLeft						:uint;		private var _minutesLeft					:uint;		private var _secondsLeft					:uint;			private var _milliLeft						:uint;				private const UNTIL							:String = "till";			private const SINCE							:String = "since";			private const AM							:String = "AM";			private const PM							:String = "PM";			private const JANUARY						:String = "January";			private const FEBRUARY						:String = "February";			private const MARCH							:String = "March";			private const APRIL							:String = "April";			private const MAY							:String = "May";			private const JUNE							:String = "June";			private const JULY							:String = "July";			private const AUGUST						:String = "August";			private const SEPTEMBER						:String = "September";			private const OCTOBER						:String = "October";			private const NOVEMBER						:String = "November";			private const DECEMBER						:String = "December";					private const SUNDAY						:String = "Sunday";			private const MONDAY						:String = "Monday";			private const TUESDAY						:String = "Tuesday";			private const WEDNESDAY						:String = "Wednesday";			private const THURSDAY						:String = "Thursday";			private const FRIDAY						:String = "Friday";			private const SATURDAY						:String = "Saturday";					private const MILLISECONDS					:String = "milliseconds";			private const SECONDS						:String = "seconds";			private const MINUTES						:String = "minutes";			private const HOURS							:String = "hours";			private const DAYS							:String = "days";			private const WEEKS							:String = "weeks";			private const MONTHS						:String = "months";			private const YEARS							:String = "years";			private	const MILLI_IN_SECOND				:Number = 1000;		private	const MILLI_IN_MINUTE				:Number = 60000;			// MILLI_IN_SECOND * 60;		private	const MILLI_IN_HOUR					:Number = 3600000;			// MILLI_IN_MINUTE * 60;		private	const MILLI_IN_DAY					:Number = 86400000;			// MILLI_IN_HOUR * 24;		private	const MILLI_IN_MONTH				:Number = 2592000000;		// MILLI_IN_DAY * 30;		private	const MILLI_IN_YEAR					:Number = 31526000000;		// MILLI_IN_DAY * 365;				private var _monthArray						:Array;			public function TimeUtil($se:SingletonEnforcer) {}				public static function getInstance():TimeUtil		{			if (TimeUtil.instance == null)			{				TimeUtil.instance = new TimeUtil(new SingletonEnforcer);			}			return TimeUtil.instance;		}  				public function getYear($date:Date = null):int		{			if ( $date == null ) { $date = new Date(); }			return  $date.fullYear;		}		public function getMonth($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var month:String;			switch ($date.month)			{				case 0:					month = JANUARY;					break;				case 1:					month = FEBRUARY;					break;				case 2:					month = MARCH;					break;				case 3:					month = APRIL;					break;				case 4:					month = MAY;					break;				case 5:					month = JUNE;					break;				case 6:					month = JULY;					break;				case 7:					month = AUGUST;					break;				case 8:					month = SEPTEMBER;					break;				case 9:					month = OCTOBER;					break;				case 10:					month = NOVEMBER;					break;				case 11:					month = DECEMBER;					break;			}			return month;		}				public function getDay($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					return getDayOfWeek($date);		}				public function getHour($date:Date = null):int		{			if ( $date == null ) { $date = new Date(); }					var hours:int = ($date.hours > 12) ? $date.hours - 12 : $date.hours;			return hours;		}				public function getMinutes($date:Date = null):int		{			if ( $date == null ) { $date = new Date(); }					return $date.minutes;		}				public function getSeconds($date:Date = null):int		{			if ( $date == null ) { $date = new Date(); }					return $date.seconds;		}				public function getDate($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					return  getDay($date) + ", " + getMonth($date) + " " + $date.date;		}				public function getTime($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var mins:String =  zeroFill(getMinutes($date), 10);			return  getHour($date) + ":" + mins + " " + noonTime($date);		}					public function getTimeWithSecs($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var mins:String =  zeroFill(getMinutes($date), 10);			var secs:String =  zeroFill(getSeconds($date), 10);			return  getHour($date) + ":" + mins + " " + secs + " " + noonTime($date);		}				public function hasDatePassed($date:String):Boolean		{			var date:Date = adjustForDayLightSavings(new Date(Date.parse($date)));			var num:Number = date.getTime() - new Date().getTime();			if (num > 0) return false;			else return true;		}				public function getTimeZone():Number		{			// Create two dates: one summer and one winter			var date_0:Date = new Date( 0, 0, 1 )			var date_1:Date = new Date( 0, 6, 1 )			// largest value has no DST modifier			var timeZoneDifference:Number = Math.max( date_0.timezoneOffset, date_1.timezoneOffset )			// convert to milliseconds			return timeZoneDifference * 60000;		}				public function getDayLighSavingTime( $date:Date ):Number		{			var timeZoneDifference:Number = getTimeZone()			var dayLighSavingTime:Number = ($date.timezoneOffset * 60000) - timeZoneDifference			return dayLighSavingTime;		}				public function adjustForDayLightSavings( $date:Date ):Date		{			if (getDayLighSavingTime($date)  < 0)			{				$date.setTime($date.getTime() + getDayLighSavingTime($date)) ;			}			return $date;		}				private function noonTime($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var noonTime:String = ($date.hours > 11) ? PM : AM;			return noonTime;		}				public function giveBackTime($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var hours:int = ($date.hours > 12) ? $date.hours - 12 : $date.hours;			var mins:String = zeroFill($date.minutes, 10);			return  hours + ":" + mins + " " + noonTime($date);		}					public function daysInMonth($month:String, $year:String):int		{			_monthArray = [ JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST,SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER ];			var month:Number;			var l:int =  _monthArray.length;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				if ($month == _monthArray[i].toString()) { month = i; }			}				var date:Date = new Date($year, month + 1, 0);			return date.date;		}				public function daysInYear($year:String):int		{			var days:int;			var l:int =  12;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var date:Date = new Date($year, i + 1, 0);				days = days + date.date;			}				return days;		}				public function getDayOfWeek($date:Date = null):String		{			if ( $date == null ) { $date = new Date(); }					var day:String;			switch ($date.day)			{				case 0:					day = SUNDAY;					break;				case 1:					day = MONDAY;					break;				case 2:					day = TUESDAY;					break;				case 3:					day = WEDNESDAY;					break;				case 4:					day = THURSDAY;					break;				case 5:					day = FRIDAY;					break;				case 6:					day = SATURDAY;					break;			}			return day;		}		 		public function getTimeLeft($date:String, $unit:String = "days"):*		{			var now:Date = new Date();			var date:Date = adjustForDayLightSavings(new Date(Date.parse($date)));			var difference:Number = date.getTime() - now.getTime();			var timeLeft:Number;			switch ($unit)			{				case MILLISECONDS:					timeLeft = Math.ceil(difference);					break;				case SECONDS:					timeLeft = Math.ceil(difference / 1000);					break;				case MINUTES:					timeLeft = Math.ceil(difference / 1000 / 60);					break;				case HOURS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60);					break;				case DAYS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60 / 24);					break;				case WEEKS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60 / 24 / 7);					break;				case MONTHS:					timeLeft = Math.floor(difference / 1000 / 60 / 60 / 24 / 30);					break; 				case YEARS:					timeLeft = Math.floor(difference / 1000 / 60 / 60 / 24 / 30 / 12);					break;			}			return (timeLeft <= 0) ? "That date has passed" : timeLeft;		}				public function clock($secs:Boolean = false):void		{			_secs 		= $secs			var timer:Timer = new Timer(1000);			timer.addEventListener(TimerEvent.TIMER, onClockTimeHandler, false, 0, true);			timer.start();		}				private function onClockTimeHandler(e:TimerEvent):void		{			var text:String = (_secs) ? getTimeWithSecs() : getTime();			dispatchEvent(new TimeUtilEvent(TimeUtilEvent.CLOCK_UPDATE, text));		}			public function zeroFill($value:int, $int:int):String		{			var adjusted:String = ( $value < $int ) ? "0" + $value.toString() : $value.toString();			return adjusted;		}				public function countDownSingleUnit($date:String, $unit:String = "days"):void		{			_singleUnitCounterDate 			= adjustForDayLightSavings(new Date(Date.parse($date)));			_singleUnitCounterUnits			= $unit;						_singleUnitCounterTimer =(_singleUnitCounterUnits == MILLISECONDS) ? new Timer(1) : new Timer(1000);			_singleUnitCounterTimer.addEventListener(TimerEvent.TIMER, countDownSingleUnitHandler, false, 0, true);			_singleUnitCounterTimer.start();			}			private function countDownSingleUnitHandler(e:TimerEvent):void		{			var date:Date 					= new Date();			var difference:Number			= _singleUnitCounterDate.getTime() - date.getTime();			var timeLeft:Number;			var unit:String;			switch (_singleUnitCounterUnits)			{				case MILLISECONDS:					timeLeft = Math.ceil(difference);					unit = (timeLeft > 1) ? " " + MILLISECONDS : " second";					break;				case SECONDS:					timeLeft = Math.ceil(difference / 1000);					unit = (timeLeft > 1) ? " " + SECONDS : " second";					break;				case MINUTES:					timeLeft = Math.ceil(difference / 1000 / 60);					unit = (timeLeft > 1) ? " " + MINUTES : " minute";					break;				case HOURS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60);					unit = (timeLeft > 1) ? " " + HOURS : " hour";					break;				case DAYS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60 / 24);					unit = (timeLeft > 1) ? " " + DAYS : " day";					break;				case WEEKS:					timeLeft = Math.ceil(difference / 1000 / 60 / 60 / 24 / 7);					unit = (timeLeft > 1) ? " " + WEEKS : " week";					break;				case MONTHS:					timeLeft = Math.floor(difference / 1000 / 60 / 60 / 24 / 30);					unit = (timeLeft > 1) ? " " + MONTHS : " month";					break;				case YEARS:					timeLeft = Math.floor(difference / 1000 / 60 / 60 / 24 / 30 / 12);					unit = (timeLeft > 1) ? " " + YEARS : " year";					break;			}			var valueLeft:String;			if (timeLeft <= 0)			{					valueLeft = "Countdown Complete";				dispatchEvent(new TimeUtilEvent(TimeUtilEvent.COUNTDOWN_SINGLEUNIT_COMPLETE, "", valueLeft));				_singleUnitCounterTimer.stop();				_singleUnitCounterTimer.removeEventListener(TimerEvent.TIMER, countDownSingleUnitHandler);				return;			}			else			{				valueLeft = timeLeft.toString() + unit + " " + "left";				dispatchEvent(new TimeUtilEvent(TimeUtilEvent.COUNTDOWN_SINGLEUNIT_UPDATE, "", valueLeft));				return;			} 		}				public function counterClock($date:String, $direction:String = "till", $unit:String = "seconds", $endDate:String = ""):void		{			_counterDate 				= adjustForDayLightSavings(new Date(Date.parse($date)));			_counterDirection		= $direction;			_counterStopDate		= adjustForDayLightSavings(new Date(Date.parse($endDate)));						_counterTimer =($unit == MILLISECONDS) ? new Timer(1) : new Timer(1000);			_counterTimer.addEventListener(TimerEvent.TIMER, counterClockHandler, false, 0, true);			_counterTimer.start();			}				public function stopCounterClock():void		{			_counterTimer.removeEventListener(TimerEvent.TIMER, counterClockHandler);			_counterTimer.stop();			_counterTimer = null;			}			private function counterClockHandler(e:TimerEvent):void		{			var now:Date = new Date();			var timeLeft:Number =(_counterDirection == UNTIL) ? _counterDate.getTime() - now.getTime() : now.getTime() - _counterDate.getTime();						if (_counterDirection == SINCE && (_counterStopDate.getTime() - now.getTime()) < 10)			{ 				_counterTimer.stop();				_counterTimer.removeEventListener(TimerEvent.TIMER, counterClockHandler); 				dispatchEvent(new TimeUtilEvent(TimeUtilEvent.COUNTDOWN_COMPLETE, "", "Countdown Complete"));				return;			}			else if (_counterDirection == UNTIL && timeLeft < 10) 			{ 				_counterTimer.stop();				_counterTimer.removeEventListener(TimerEvent.TIMER, counterClockHandler); 				dispatchEvent(new TimeUtilEvent(TimeUtilEvent.COUNTDOWN_COMPLETE, "", "Countdown Complete"));				return;			} 			_yearsLeft = timeLeft / MILLI_IN_YEAR;			timeLeft -= _yearsLeft * MILLI_IN_YEAR;						_monthsLeft = timeLeft / MILLI_IN_MONTH;			timeLeft -= _monthsLeft * MILLI_IN_MONTH;						_daysLeft = timeLeft / MILLI_IN_DAY;			timeLeft -= _daysLeft * MILLI_IN_DAY;						_hoursLeft = timeLeft / MILLI_IN_HOUR;			timeLeft -= _hoursLeft * MILLI_IN_HOUR;						_minutesLeft = timeLeft / MILLI_IN_MINUTE;			timeLeft -= _minutesLeft * MILLI_IN_MINUTE;						_secondsLeft = timeLeft / MILLI_IN_SECOND;			timeLeft -= _secondsLeft * MILLI_IN_SECOND;						_milliLeft = timeLeft / 10;			var returnData:Object = {};			returnData.years 			= zeroFill(Math.abs(_yearsLeft), 10);			returnData.months 			= zeroFill(Math.abs(_monthsLeft), 10);			returnData.days 			= zeroFill(Math.abs(_daysLeft), 10);			returnData.hours 			= zeroFill(Math.abs(_hoursLeft), 10);			returnData.minutes 			= zeroFill(Math.abs(_minutesLeft), 10);			returnData.seconds 			= zeroFill(Math.abs(_secondsLeft), 10);			returnData.milliseconds 	= zeroFill(Math.abs(_milliLeft), 10); 			dispatchEvent(new TimeUtilEvent(TimeUtilEvent.COUNTDOWN_UPDATE, "", "", returnData));		}		}}class SingletonEnforcer {}