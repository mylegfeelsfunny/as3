package{	import com.deepfocus.as3.display.video.videoplayer.ChromelessVideoPlayer;	import com.deepfocus.as3.display.video.videoplayer.VideoPlayer;	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;		import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.external.ExternalInterface;	import flash.system.Security;	import flash.system.System;		import flashx.textLayout.utils.CharacterUtil;
	public class VideoShellLess extends Sprite	{		private var _path:String;		private var _height:Number;		private var _width:Number;		private var _swf:String;		private var _video:ChromelessVideoPlayer;				public function VideoShellLess()		{			_init();		}				private function _init():void		{			Security.allowDomain('*');			Security.allowInsecureDomain('*');						var myFlashVar:String;			var varName:String;			var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;			for (varName in paramObj) {				myFlashVar = String(paramObj[varName]);			}						_path =(paramObj["path"]) ? paramObj["path"] : "assets/media/flv/bringbackrecess.f4v";			_swf =(paramObj["swf"]) ? paramObj["swf"] : "assets/swf/controls.swf";			_width =(paramObj["width"]) ? int(paramObj["width"].toString()) : 600;			_height =(paramObj["height"]) ? int(paramObj["height"].toString()) : 400;						if (stage) {				stage.stageWidth = _width;				stage.stageHeight = _height;				stage.scaleMode = StageScaleMode.NO_SCALE;				stage.align = StageAlign.TOP_LEFT;			}			//var video:SkinlessVideoPlayer = new SkinlessVideoPlayer(_path, _width, _height);			_video = new ChromelessVideoPlayer(_path, _width, _height);			_video.addEventListener(VideoControllerEvent.CONNECTION_MADE, startVideoHandler, false, 0, true);			_video.addEventListener(VideoControllerEvent.VIDEO_OVER, overVideoHandler, false, 0, true);			addChild(_video);		}				private function startVideoHandler($e:VideoControllerEvent):void		{			_video.resume();		}				private function overVideoHandler($e:VideoControllerEvent):void		{		}				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------				//--------------------------------------------------------------------------		//  EXTERNAL INTERFACE CALLBACKS		//--------------------------------------------------------------------------			}}