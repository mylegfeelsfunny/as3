package com.deepfocus.as3.display.video.videoplayer.model{	import com.deepfocus.as3.display.video.videoplayer.events.VideoControllerEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;		import mx.events.ResizeEvent;	import mx.events.StateChangeEvent;		public class VideoPlayerBrain extends EventDispatcher	{		protected var _video:Video;		protected var _path:String;		protected var _netConnection:NetConnection;		protected var _videoStream:NetStream;		protected var _videoDuration:Number;		protected var _scrubTimer:Timer;		protected var _videoWidth:Number;		protected var _videoHeight:Number;		protected var _dimensionsRecieved:Boolean = false;		protected var _updateCallback:Function;				public function VideoPlayerBrain($video:Video, $path:String, $callback:Function)		{			_video= $video;			_videoWidth= _video.width;			_videoHeight= _video.height;			_path= $path;			_updateCallback= $callback;		}				//--------------------------------------------------------------------------		// PUBLIC METHODS 		//--------------------------------------------------------------------------				public function openConnection():void		{			_video.alpha = 1;			_netConnection = new NetConnection();			_netConnection.connect(null);			_videoStream = new NetStream(_netConnection);			_videoStream.client = this;			_netConnection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true);			_videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false, 0, true);			//_video.smoothing = true;			_video.attachNetStream(_videoStream);			_scrubTimer = new Timer(250);			_scrubTimer.addEventListener(TimerEvent.TIMER, netStreamInfoHandler, false, 0, true);			_videoStream.play(_path);		}				public function closeConnection():void		{			_netConnection.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false);			_videoStream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusHandler, false);			_scrubTimer.removeEventListener(TimerEvent.TIMER, netStreamInfoHandler, false);			_videoStream.close();			_videoStream = null;			_netConnection = null;			_scrubTimer = null;			_video.clear();		}				public function resume():void		{			_videoStream.resume();			indicateNetStream = true;		}				public function pause():void		{			_videoStream.pause();			indicateNetStream = false ;		}				public function seek($ratio:Number):void		{			_videoStream.seek(_videoDuration * $ratio);		}				public function soundTransform($ratio:Number):void		{			var transform:SoundTransform = new SoundTransform();			transform.volume = $ratio;			_videoStream.soundTransform = transform;		}				public function set indicateNetStream($valid:Boolean):void {  			($valid) ? _scrubTimer.start() : _scrubTimer.stop();  		}				//important these should be public		public function onMetaData(info:Object):void		{			_videoDuration = Number(info.duration);			if (! _dimensionsRecieved)			{				_dimensionsRecieved = true;				sizeByRatio(info.width, info.height);				dispatchEvent(new VideoControllerEvent(VideoControllerEvent.INIT_DATA, {duration:_videoDuration}));			}		}				public function sizeByRatio(sWidth:Number, sHeight:Number):void		{			var scaleX:Number = _video.width/sWidth;			var scaleY:Number = _video.height/sHeight;			var scale:Number =(scaleX < scaleY) ? scaleX : scaleY;			_video.width = sWidth;			_video.height = sHeight;			_video.width *= scale;			_video.height *= scale;			_video.x = (_video.stage.stageWidth * .5) - (_video.width * .5);			_video.y = (_video.stage.stageHeight * .5) - (_video.height * .5);						/*			_video.width = sWidth;			_video.height = sHeight;						_video.x = (_video.stage.stageWidth * .5) - (_video.width * .5);			_video.y = (_video.stage.stageHeight * .5) - (_video.height * .5);			*/		}						public function onCuePoint(info:Object):void		{			// trace(this, "onCuePoint///////////////////////////////////////" );			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_CUE_POINT, undefined, info.name.toString()));		}				public function onXMPData(info:Object):void		{			//trace("XMPData: time=" + info.time + " name=" + info.name + " type=" + info.type);		}				public function kill():void		{			closeConnection();						if (_scrubTimer)			{				_scrubTimer.stop();				_scrubTimer = null;			}			_videoDuration = undefined;			_path = undefined;		}				//--------------------------------------------------------------------------		// PRIVATE METHODS 		//--------------------------------------------------------------------------				protected function netStreamInfoHandler($e:TimerEvent=null):void		{			var ratioLoaded:Number = _videoStream.bytesLoaded / _videoStream.bytesTotal;			var ratioPlayed:Number = _videoStream.time / _videoDuration;						var updataObj:Object = {};			updataObj.progress = ratioPlayed;			updataObj.loaded = ratioLoaded;			updataObj.time = _videoStream.time;			_updateCallback(updataObj);		}				//<!-- NetConnection, NetStream Handler		private function securityErrorHandler($e:SecurityErrorEvent):void		{			trace("securityErrorHandler: " + $e);		}				private function netStatusHandler($evt:NetStatusEvent):void		{			for (var ID:* in $evt.info)			{				trace("event.info."+ID+" = "+$evt.info.code);			}			switch ($evt.info.code)			{				case "NetConnection.Connect.Success" :					trace("NetConnection.Connect.Success");					break;				case "NetStream.Buffer.Full" :					dispatchEvent(new VideoControllerEvent(VideoControllerEvent.CONNECTION_MADE));					break;				case "NetStream.Seek.InvalidTime" :					dispatchEvent(new VideoControllerEvent(VideoControllerEvent.INVALID_TIME));					break;				case "NetStream.Play.StreamNotFound" :					throw new Error("Stream not found: " + _path);					break;				case "NetStream.Play.Stop" :					trace("NetStream.Play.Stop:VIDEO STOPS end duration");					dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_OVER));					break;			}		}			}}