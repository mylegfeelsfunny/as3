package com.deepfocus.as3.display.video.dfvideoplayer.ui{	import com.deepfocus.as3.display.video.dfvideoplayer.DFVideoPlayer;	import com.deepfocus.as3.display.video.dfvideoplayer.events.VideoControllerEvent;	import com.deepfocus.as3.utils.LibraryAssetRetriever;	import com.greensock.TweenLite;	import com.greensock.TweenNano;	import com.greensock.easing.Quad;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageDisplayState;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.utils.Timer;
		public class VideoControls extends Sprite	{		private var _mc						:MovieClip;		private var _background				:MovieClip;		private var _playBtn				:MovieClip;		private var _pauseBtn				:MovieClip;		private var _soundSymbol			:MovieClip;		private var _soundSlider			:SoundSlider;		private var _playedProgressBar		:MovieClip;		private var _loadedProgressBar		:MovieClip;		private var _totalProgressBar		:MovieClip;		private var _scrubber				:MovieClip;		private var _spinner				:MovieClip;		private var _fullScreenBtn			:MovieClip;		private var _totalTime				:TextField;		private var _time					:MovieClip;		private var _currentTime			:TextField;				// offset values		private var _scrubberMax			:Number;		private var _scrubberMin			:Number;		private var _progressBarX			:Number;		private var _progressBarY			:Number;		private var _progressBarWidth		:Number;		private var _scrubberOffsetX		:Number;		private var _scrubberHalf			:Number;		private var _backgroundWidth		:Number;		private var _backgroundHeight		:Number;				private var _scrubTimer				:Timer;				public function VideoControls($mc:MovieClip, $width:Number=undefined, $height:Number=undefined)		{			_mc = $mc;			_backgroundWidth = $width;			_backgroundHeight = $height;			addEventListener(Event.ADDED_TO_STAGE, _init, false, 0, true);		}		public function set totalTimeValue(value:String):void {			_totalTime.text = value;  		}		public function set currentTimeValue(value:String):void {			_currentTime.text = value;  		}			private function _init($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init, false);			addChild(_mc);			_playBtn					= _mc.playbutton;			_playBtn.buttonMode			= true;			_playBtn.addEventListener(MouseEvent.CLICK, onPlayBtnClickHandler, false, 0, true);			_playBtn.addEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false, 0, true);			_playBtn.addEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false, 0, true);			//			_pauseBtn					= _mc.pausebutton;			_pauseBtn.buttonMode		= true;			_pauseBtn.addEventListener(MouseEvent.CLICK, onPauseBtnClickHandler, false, 0, true);			_pauseBtn.addEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false, 0, true);			_pauseBtn.addEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false, 0, true);			//			_totalProgressBar			= _mc.fullbar;			_loadedProgressBar			= _mc.loadprogressbar;			_playedProgressBar			= _mc.playprogressbar;			_loadedProgressBar.addEventListener(MouseEvent.CLICK, onClickScrubHandler, false, 0, true);			_loadedProgressBar.buttonMode = true;			//			_scrubber					= _mc.scrubber;			_scrubber.buttonMode		= true;			_scrubber.addEventListener(MouseEvent.MOUSE_DOWN, onScrubberMouseDownHandler, false, 0, true);			//			_soundSymbol				= _mc.soundSymbol;			_soundSymbol.buttonMode		= true;			_soundSymbol.mouseChildren	= false;			_soundSymbol.addEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false, 0, true);			_soundSymbol.addEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false, 0, true);						_fullScreenBtn				= _mc.fullScreenBtn;			_fullScreenBtn.buttonMode	= true;			_fullScreenBtn.addEventListener(MouseEvent.MOUSE_DOWN, displayStateChangeHandler, false, 0, true);			_fullScreenBtn.addEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false, 0, true);			_fullScreenBtn.addEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false, 0, true);		//	_fullScreenBtn.visible = false					_totalTime					= _mc.time.totalTime;			_currentTime				= _mc.time.currentTime;			_spinner					= _mc.spinner;			_time						= _mc.time;						//_mc.soundSlider.x = 0;			//_mc.soundSlider.y = 0;			var sliderBtn:MovieClip 	= new Slider();			_soundSlider			 	= new SoundSlider(sliderBtn, onSliderValueChanged);			_soundSlider.buttonMode		= true;			_soundSlider.value			= 1;			_soundSlider.mc.addEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false, 0, true);			_soundSlider.mc.addEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false, 0, true);						_soundSymbol.addEventListener(MouseEvent.ROLL_OVER, onSoundSymbolRollOverHandler, false, 0, true);			_mc.addChild(_scrubber);			_mc.addChild(_soundSlider);			resetUI();		}				public function resetUI():void		{			_soundSymbol.x				= _backgroundWidth - (_soundSymbol.width);			_soundSymbol.y				= _backgroundHeight - (_soundSymbol.height);			_mc.addChild(_soundSymbol);						_soundSlider.x				= _soundSymbol.x;			_soundSlider.y				= (_soundSymbol.y - _soundSlider.height);						_soundSlider.visible		= false;			_soundSymbol.visible		= true;						_fullScreenBtn.x 			= (_soundSymbol.x - _fullScreenBtn.width) - 2;			_fullScreenBtn.y 			= _backgroundHeight - _fullScreenBtn.height;			_mc.addChild(_fullScreenBtn);			_time.x 					= (_fullScreenBtn.x - _time.width) - 2;			_time.y 					= _backgroundHeight - _time.height;			_mc.addChild(_time);			//			_pauseBtn.x					= 0;			_pauseBtn.y					= _backgroundHeight - _pauseBtn.height;			//			_playBtn.x					= _pauseBtn.x;			_playBtn.y					= _backgroundHeight - _playBtn.height;			//			_totalProgressBar.x			= _playBtn.x + _playBtn.width + 2;			_totalProgressBar.y			= _backgroundHeight - _totalProgressBar.height;			_totalProgressBar.width		= (_time.x - 4) - (_playBtn.x + _pauseBtn.width);			_progressBarX				= _totalProgressBar.x;			_progressBarY				= _totalProgressBar.y;			_progressBarWidth			= _totalProgressBar.width;			//			_loadedProgressBar.x		= _progressBarX;			_loadedProgressBar.y		= _progressBarY;			_loadedProgressBar.width	= 0;			//			_playedProgressBar.x		= _progressBarX;			_playedProgressBar.y		= _progressBarY;			_playedProgressBar.width	= 0;			//			_scrubberOffsetX			= _progressBarX - (_scrubber.width * .5);			_scrubber.x					= 20;			_scrubber.y					= _backgroundHeight - _scrubber.height;			_scrubberHalf				= (_scrubber.width * .5);			_scrubberMax				= _progressBarX + _progressBarWidth;			_scrubberMin				= _progressBarX;						//		}						//--------------------------------------------------------------------------		// PUBLIC METHODS 		//--------------------------------------------------------------------------						public function setScrubberPosition($ratio:Number):void		{			setPlayProgressWidth($ratio);			var sDest:Number = (_totalProgressBar.width * $ratio) + _scrubberOffsetX;			_scrubber.x =(sDest > 20) ? sDest : 20;		}				public function setLoadProgressWidth($ratio:Number):void		{			_loadedProgressBar.width = _totalProgressBar.width * $ratio;			_scrubberMax = _loadedProgressBar.width + _progressBarX;		}				public function setPlayProgressWidth($ratio:Number):void		{			_playedProgressBar.width = _totalProgressBar.width * $ratio;		}				public function setVolume($value:Number):void		{			_soundSlider.value = $value;		}		public function togglePlayPause($playIsTrue:Boolean):void		{			switch($playIsTrue)			{				case true:					_playBtn.visible = true;					_pauseBtn.visible = false;					break;				case false:					_playBtn.visible = false;					_pauseBtn.visible = true;					break;			}		}				public function kill():void		{			_playBtn.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false);			_playBtn.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false);			_pauseBtn.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false);			_pauseBtn.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false);			_soundSymbol.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false);			_soundSymbol.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false);			_fullScreenBtn.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false);			_fullScreenBtn.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false);			_soundSlider.mc.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverBtn, false);			_soundSlider.mc.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutBtn, false);						_playBtn.removeEventListener(MouseEvent.CLICK, onPlayBtnClickHandler, false);			_pauseBtn.removeEventListener(MouseEvent.CLICK, onPauseBtnClickHandler, false);			_scrubber.removeEventListener(MouseEvent.MOUSE_DOWN, onScrubberMouseDownHandler, false);			_soundSymbol.removeEventListener(MouseEvent.ROLL_OVER, onSoundSymbolRollOverHandler, false);			_fullScreenBtn.removeEventListener(MouseEvent.MOUSE_DOWN, displayStateChangeHandler, false);			TweenNano.killTweensOf(this, true);			_soundSlider.kill();						/*			var l:int =  _mc.numChildren;			var i:int = 0;			for ( i = 0; i < l; i++ )			{				var c:DisplayObject = DisplayObject(getChildAt(i));				trace(c);				c = null;			}			*/			removeChild(_mc);			_mc = null;						_scrubberMax = undefined;			_scrubberMin = undefined;			_progressBarX = undefined;			_progressBarY = undefined;			_progressBarWidth = undefined;			_scrubberOffsetX = undefined;			_scrubberHalf = undefined;			_backgroundWidth = undefined;			_backgroundHeight = undefined;			_backgroundHeight = undefined;						if(_scrubTimer){				_scrubTimer.stop();					_scrubTimer.removeEventListener(TimerEvent.TIMER, onScrubTimerLoopHandler, false);				_scrubTimer =null;			}		}				//--------------------------------------------------------------------------		// EVENT HANDLERS		//--------------------------------------------------------------------------		private function onPlayBtnClickHandler($e:MouseEvent):void		{			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_RESUME));		}				private function onPauseBtnClickHandler($e:MouseEvent):void		{			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_PAUSE));		}				private function onClickScrubHandler($e:MouseEvent):void		{//			if (mouseX > _loadedProgressBar.width+_loadedProgressBar.x) return;			_scrubber.x = mouseX -_scrubberHalf;			var percent:Number = (mouseX - _scrubberMin)/_progressBarWidth;			//setPlayProgressWidth(percent);			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_SCRUB_POSITION, percent));		}				private function onScrubberMouseDownHandler($e:MouseEvent):void		{			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_INIT_SCRUBBING));			stage.addEventListener(MouseEvent.MOUSE_UP, onStageMouseUpHandler,false, 0, true);			_scrubTimer = new Timer(60);			_scrubTimer.addEventListener(TimerEvent.TIMER, onScrubTimerLoopHandler, false, 0, true);			_scrubTimer.start();			}				private function onScrubTimerLoopHandler($e:TimerEvent):void		{			var destX:Number = mouseX;						if (destX < _scrubberMin) destX = _scrubberMin			else if (destX > _scrubberMax) destX = _scrubberMax;			_scrubber.x = destX -_scrubberHalf			//_scrubber.x += (destX - _scrubber.x)/3;			var percent:Number = ((destX) - _scrubberMin)/_totalProgressBar.width;			//trace(this, "percent", percent);			setPlayProgressWidth(percent);			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_SCRUB_POSITION, percent));		}				private function onStageMouseUpHandler($e:MouseEvent):void		{			_scrubTimer.stop();						_scrubTimer.removeEventListener(TimerEvent.TIMER, onScrubTimerLoopHandler, false);			stage.removeEventListener(MouseEvent.MOUSE_UP, onStageMouseUpHandler,false);			_scrubTimer = null;			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_END_SCRUBBING));		}				private function onSoundSymbolRollOverHandler($e:MouseEvent):void		{			_soundSlider.visible		= true;			//_soundSymbol.visible		= false;			_soundSymbol.removeEventListener(MouseEvent.ROLL_OVER, onSoundSymbolRollOverHandler, false);			_soundSlider.addEventListener(MouseEvent.ROLL_OUT, onSoundSliderRollOutHandler, false, 0, true);			_soundSymbol.addEventListener(MouseEvent.ROLL_OUT, onSoundSliderRollOutHandler, false, 0, true);		}				private function onSoundSliderRollOutHandler($e:MouseEvent):void		{			if ((mouseX > _soundSlider.x && mouseX < _soundSlider.x + _soundSlider.width) &&				(mouseY > _soundSlider.y && mouseY < _soundSlider.y + _soundSlider.height)) {				return;				}			_soundSlider.visible		= false;			//_soundSymbol.visible		= true;			_soundSlider.killTimer();			_soundSlider.removeEventListener(MouseEvent.ROLL_OUT, onSoundSliderRollOutHandler, false);			_soundSymbol.removeEventListener(MouseEvent.ROLL_OUT, onSoundSliderRollOutHandler, false);			_soundSymbol.addEventListener(MouseEvent.ROLL_OVER, onSoundSymbolRollOverHandler, false, 0, true);		}				private function onSliderValueChanged($value:Number):void		{			if ($value <= .1) {				_soundSymbol.gotoAndStop(4)			} else if ($value < .3 && $value > .1) {				_soundSymbol.gotoAndStop(3);			} else if ($value < .7 && $value >.3) {				_soundSymbol.gotoAndStop(2);			}  else {				_soundSymbol.gotoAndStop(1);			}			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.VIDEO_SOUND_TRANSFORM, $value));		}				private function displayStateChangeHandler($e:MouseEvent):void		{			dispatchEvent(new VideoControllerEvent(VideoControllerEvent.FULLSCREEN));		}		private function onMouseOverBtn($e:MouseEvent):void		{			over(MovieClip($e.currentTarget));		}				private function onMouseOutBtn($e:MouseEvent):void		{			out(MovieClip($e.currentTarget));		}				private function over($mc:MovieClip):void		{			TweenLite.to($mc.block, .2, {alpha:.9, ease:Quad.easeOut, overwrite:0});		}				private function out($mc:MovieClip):void		{			TweenLite.to($mc.block, .2, {alpha:.7, ease:Quad.easeOut, overwrite:0});		}			}}