package com.deepfocus.as3.display.video.dfvideoplayer{	import com.deepfocus.as3.display.video.dfvideoplayer.events.VideoControllerEvent;	import com.deepfocus.as3.display.video.dfvideoplayer.ui.VideoControls;	import com.deepfocus.as3.display.video.dfvideoplayer.ui.VideoPlayerBrain;	import com.deepfocus.as3.utils.LibraryAssetRetriever;	import com.greensock.TweenLite;	import com.greensock.TweenNano;	import com.greensock.easing.Quad;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.media.Video;	import flash.ui.Keyboard;	import flash.utils.Timer;
		public class DFVideoPlayer extends Sprite	{		protected var _controls				:VideoControls;		protected var _videoPlayerBrain		:VideoPlayerBrain;		protected var _video				:Video;		protected var _controlsMC			:MovieClip;		protected var _videoWidth			:Number;		protected var _videoHeight			:Number;		protected var _videoPath			:String;		protected var _volume				:Number;		protected var _autoplay				:Boolean;		protected var _spinner				:MovieClip;		protected var _mouseInteracter		:Sprite;		public static const PLAYER_STATE_INIT				:String = "player_state_init";		public static const PLAYER_STATE_PAUSE				:String = "player_state_pause";		public static const PLAYER_STATE_RESUME				:String = "player_state_resume";		public static const PLAYER_STATE_SCRUB_START		:String = "player_state_scrub_start";		public static const PLAYER_STATE_SCRUB_END			:String = "player_state_scrub_end";		public static const PLAYER_STATE_END				:String = "player_state_end";		protected var _currentState:String;				private var _pauseStart								:Boolean = true;		private var _controlsTimer			:Timer;		public function DFVideoPlayer($videoLink:String, $width:Number, $height:Number, $controlMC:MovieClip)		{			_videoPath = $videoLink;			_videoWidth = $width;			_videoHeight = $height;			_controlsMC = $controlMC;			addEventListener(Event.ADDED_TO_STAGE, _init, false, 0, true);		}		//--------------------------------------------------------------------------		//  ACCESSORS		//--------------------------------------------------------------------------				override public function get height():Number { return _videoHeight; }		public function get spinner():MovieClip { return _spinner; }		//--------------------------------------------------------------------------		//  INIT		//--------------------------------------------------------------------------				private function _init($e:Event):void		{			removeEventListener(Event.ADDED_TO_STAGE, _init, false);						stage.addEventListener(Event.FULLSCREEN, resetControls, false, 0, true);					_video = new Video(_videoWidth, _videoHeight);			addChild(_video);						_controls = new VideoControls(_controlsMC, _videoWidth, _videoHeight);			_controls.addEventListener(VideoControllerEvent.VIDEO_RESUME, onVideResumeHandler);			_controls.addEventListener(VideoControllerEvent.VIDEO_PAUSE, onVidePauseHandler);			_controls.addEventListener(VideoControllerEvent.VIDEO_INIT_SCRUBBING, onVideoScrubbingStarted);			_controls.addEventListener(VideoControllerEvent.VIDEO_SCRUB_POSITION, onVideoScrubToPositionHandler);			_controls.addEventListener(VideoControllerEvent.VIDEO_SOUND_TRANSFORM, onVideoSoundTransformHandler);			_controls.addEventListener(VideoControllerEvent.VIDEO_END_SCRUBBING, onVideoScrubbingFinished);			_controls.addEventListener(VideoControllerEvent.FULLSCREEN, onFullScreen, false, 0, true);			//_controls.y = _videoHeight-60;			//_controls.x = 0;			addChild(_controls);						_videoPlayerBrain = new VideoPlayerBrain(_video, _videoPath, _controls);			_videoPlayerBrain.addEventListener(VideoControllerEvent.VIDEO_OVER, onVideoOverHandler);			_videoPlayerBrain.addEventListener(VideoControllerEvent.CONNECTION_MADE, onConnectionMade);			_videoPlayerBrain.addEventListener(VideoControllerEvent.INVALID_TIME, onInvalidTime);						_volume = .5;			currentState = PLAYER_STATE_INIT;						this.addEventListener(MouseEvent.ROLL_OVER, onMouseOverVideo, false, 0, true);			this.addEventListener(MouseEvent.ROLL_OUT, onMouseOutVideo, false, 0, true);		}				//--------------------------------------------------------------------------		//  PUBLIC METHODS		//--------------------------------------------------------------------------		public function get currentState():String { return _currentState; }		public function set currentState(value:String):void {			_currentState = value;  			playerStateUpdate();		}				protected function playerStateUpdate():void		{			switch (_currentState)			{				case PLAYER_STATE_INIT:					if (_pauseStart)					_videoPlayerBrain.openConnection();					_videoPlayerBrain.soundTransform(_volume);					_controls.setVolume(_volume);					_videoPlayerBrain.indicateNetStream(true);					_controls.togglePlayPause(false);					break;				case PLAYER_STATE_RESUME:					_videoPlayerBrain.resume();					_controls.togglePlayPause(false);					break;				case PLAYER_STATE_PAUSE:					_videoPlayerBrain.pause();					_controls.togglePlayPause(true);					break;				case PLAYER_STATE_END:					_videoPlayerBrain.seek(0);					_videoPlayerBrain.pause();					//_video.alpha = .1;					_controls.togglePlayPause(true);					_controls.resetUI();					_videoPlayerBrain.indicateNetStream(false);					break;			}		}		public function begin($path:String):void		{			_videoPlayerBrain.path = $path;			currentState = PLAYER_STATE_INIT;		}				public function switchVideo($path:String):void		{			_videoPlayerBrain.closeConnection();			_videoPlayerBrain.path = $path;			_controls.resetUI();			currentState = PLAYER_STATE_INIT;		}				public function kill():void		{			_controls.removeEventListener(VideoControllerEvent.VIDEO_RESUME, onVideResumeHandler);			_controls.removeEventListener(VideoControllerEvent.VIDEO_PAUSE, onVidePauseHandler);			_controls.removeEventListener(VideoControllerEvent.VIDEO_INIT_SCRUBBING, onVideoScrubbingStarted);			_controls.removeEventListener(VideoControllerEvent.VIDEO_SCRUB_POSITION, onVideoScrubToPositionHandler);			_controls.removeEventListener(VideoControllerEvent.VIDEO_SOUND_TRANSFORM, onVideoSoundTransformHandler);			_controls.removeEventListener(VideoControllerEvent.VIDEO_END_SCRUBBING, onVideoScrubbingFinished);			_controls.removeEventListener(VideoControllerEvent.FULLSCREEN, onFullScreen);						//Keyboard.k						_videoPlayerBrain.removeEventListener(VideoControllerEvent.VIDEO_OVER, onVideoOverHandler);			_videoPlayerBrain.removeEventListener(VideoControllerEvent.INVALID_TIME, onInvalidTime);			_videoPlayerBrain.removeEventListener(VideoControllerEvent.VIDEO_CUE_POINT, onVideoCuePointHandler);			//_mouseInteracter.removeEventListener(MouseEvent.ROLL_OVER, onMouseOverVideo, false);			//_mouseInteracter.removeEventListener(MouseEvent.ROLL_OUT, onMouseOutVideo, false);						TweenNano.killTweensOf(this, true);			TweenNano.killTweensOf(_controls, true);			_controls.kill();			removeChild(_controls);			removeChild(_video);			//removeChild(_spinner);						_videoPlayerBrain.kill();			_video.clear();			_videoWidth		= undefined;			_videoPath		= undefined;			_volume			= undefined;			_currentState	= undefined;			_video = null;			//_controls = null;			_spinner = null;		}		public function pause():void		{			onVidePauseHandler(null)		}				public function resume():void		{			onVideResumeHandler(null)		}				public function setSound($value:Number):void		{			_controls.setVolume($value);			_videoPlayerBrain.soundTransform($value);		}				//--------------------------------------------------------------------------		// PRIVATE METHODS		//--------------------------------------------------------------------------		private function _startTimer($e:*=null):void		{			trace(this, "_startTimer");			_controls.alpha = 1;			if (!_controlsTimer) {				_controlsTimer = new Timer(2000, 0);				_controlsTimer.addEventListener(TimerEvent.TIMER, onMoveTimerComplete, false, 0, true);			}						if (_controlsTimer.running) {				_controlsTimer.reset()			} 			_controlsTimer.start();			}		//--------------------------------------------------------------------------		//  EVENT HANDLERS		//--------------------------------------------------------------------------		protected function onVideResumeHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_RESUME;			dispatchEvent($e);		}		protected function onVidePauseHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_PAUSE;			dispatchEvent($e);		}		protected function onVideoOverHandler($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			dispatchEvent($e);		}		protected function onInvalidTime($e:VideoControllerEvent):void		{			currentState = PLAYER_STATE_END;			dispatchEvent($e);		}		protected function onVideoCuePointHandler($e:VideoControllerEvent):void		{			dispatchEvent($e);			}		protected function onVideoScrubbingStarted($e:VideoControllerEvent):void		{			_video.alpha = 1;			_videoPlayerBrain.indicateNetStream(false);			dispatchEvent($e);		}		protected function onVideoScrubToPositionHandler($e:VideoControllerEvent):void		{			_videoPlayerBrain.seek($e.percent);			dispatchEvent($e);		}		protected function onVideoScrubbingFinished($e:VideoControllerEvent):void		{			dispatchEvent($e);			if (_currentState == PLAYER_STATE_RESUME || _currentState == PLAYER_STATE_INIT) {				_videoPlayerBrain.indicateNetStream(true);			}		}		protected function onVideoSoundTransformHandler($e:VideoControllerEvent):void		{			dispatchEvent($e);			_volume = $e.percent;			_videoPlayerBrain.soundTransform(_volume);		}				private function onConnectionMade($e:VideoControllerEvent):void		{			setSound(_volume);			dispatchEvent($e);			}				private function onFullScreen($e:VideoControllerEvent):void		{			try {				switch(stage.displayState) {					case StageDisplayState.NORMAL:						_video.width = stage.fullScreenWidth;						_video.height = stage.fullScreenHeight;						stage.displayState = StageDisplayState.FULL_SCREEN;						_startTimer();						stage.addEventListener(MouseEvent.MOUSE_MOVE, _startTimer, false, 0, true);						break;					case StageDisplayState.FULL_SCREEN:						_video.width = _videoWidth;						_video.height = _videoHeight;						stage.displayState = StageDisplayState.NORMAL;						stage.removeEventListener(MouseEvent.MOUSE_MOVE, _startTimer, false);						if (_controlsTimer){							_controlsTimer.addEventListener(TimerEvent.TIMER, onMoveTimerComplete, false, 0, true);							_controlsTimer.stop();							_controlsTimer = null;						}						break;				}							} catch (err:SecurityError) {			}		}				private function resetControls($e:Event):void		{/*			switch(stage.displayState) {				case StageDisplayState.NORMAL:					_controls.y = 0;					_controls.scaleX = _controls.scaleY = 1;					break;				case StageDisplayState.FULL_SCREEN:					_controls.y = stage.stageHeight - _controls.height;					_controls.scaleX = _controls.scaleY = .4;					break;			}			_controls.x = (_video.width * .5) - (_controls.width * .5) ;*/		}				private function onMoveTimerComplete($e:TimerEvent):void		{			TweenNano.to(_controls, 1, {alpha:0, ease:Quad.easeOut});		}		private function onMouseOverVideo($e:MouseEvent):void		{			TweenNano.to(_controls, .7, {alpha:1, ease:Quad.easeOut, overwrite:0});		}				private function onMouseOutVideo($e:MouseEvent):void		{			TweenNano.to(_controls, .7, {alpha:0, ease:Quad.easeOut, overwrite:0});		}	}}